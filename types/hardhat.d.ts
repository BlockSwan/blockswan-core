/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "BaseImmutableAdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseImmutableAdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "InitializableImmutableAdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitializableImmutableAdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "AccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerable__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IAccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerable__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "AdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "BaseAdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseAdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "BaseUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "InitializableAdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitializableAdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "InitializableUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitializableUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "UpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeabilityProxy__factory>;
    getContractFactory(
      name: "I_account",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.I_account__factory>;
    getContractFactory(
      name: "I_acl_manager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.I_acl_manager__factory>;
    getContractFactory(
      name: "I_addresses_provider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.I_addresses_provider__factory>;
    getContractFactory(
      name: "I_gig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.I_gig__factory>;
    getContractFactory(
      name: "I_provider_registry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.I_provider_registry__factory>;
    getContractFactory(
      name: "C_account",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.C_account__factory>;
    getContractFactory(
      name: "C_acl_manager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.C_acl_manager__factory>;
    getContractFactory(
      name: "C_addresses_provider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.C_addresses_provider__factory>;
    getContractFactory(
      name: "C_provider_registry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.C_provider_registry__factory>;
    getContractFactory(
      name: "C_gig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.C_gig__factory>;
    getContractFactory(
      name: "L_errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L_errors__factory>;
    getContractFactory(
      name: "L_account_data_logic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L_account_data_logic__factory>;
    getContractFactory(
      name: "L_account_logic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L_account_logic__factory>;
    getContractFactory(
      name: "L_gig_data_logic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L_gig_data_logic__factory>;
    getContractFactory(
      name: "L_gig_logic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L_gig_logic__factory>;

    getContractAt(
      name: "BaseImmutableAdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseImmutableAdminUpgradeabilityProxy>;
    getContractAt(
      name: "InitializableImmutableAdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InitializableImmutableAdminUpgradeabilityProxy>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "AccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerable>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IAccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerable>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "AdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AdminUpgradeabilityProxy>;
    getContractAt(
      name: "BaseAdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseAdminUpgradeabilityProxy>;
    getContractAt(
      name: "BaseUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseUpgradeabilityProxy>;
    getContractAt(
      name: "InitializableAdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InitializableAdminUpgradeabilityProxy>;
    getContractAt(
      name: "InitializableUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InitializableUpgradeabilityProxy>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "UpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeabilityProxy>;
    getContractAt(
      name: "I_account",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.I_account>;
    getContractAt(
      name: "I_acl_manager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.I_acl_manager>;
    getContractAt(
      name: "I_addresses_provider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.I_addresses_provider>;
    getContractAt(
      name: "I_gig",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.I_gig>;
    getContractAt(
      name: "I_provider_registry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.I_provider_registry>;
    getContractAt(
      name: "C_account",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.C_account>;
    getContractAt(
      name: "C_acl_manager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.C_acl_manager>;
    getContractAt(
      name: "C_addresses_provider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.C_addresses_provider>;
    getContractAt(
      name: "C_provider_registry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.C_provider_registry>;
    getContractAt(
      name: "C_gig",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.C_gig>;
    getContractAt(
      name: "L_errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L_errors>;
    getContractAt(
      name: "L_account_data_logic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L_account_data_logic>;
    getContractAt(
      name: "L_account_logic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L_account_logic>;
    getContractAt(
      name: "L_gig_data_logic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L_gig_data_logic>;
    getContractAt(
      name: "L_gig_logic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L_gig_logic>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
