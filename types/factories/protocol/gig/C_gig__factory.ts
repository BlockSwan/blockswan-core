/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { C_gig, C_gigInterface } from "../../../protocol/gig/C_gig";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract i_addresses_provider",
        name: "provider",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ADDRESSES_PROVIDER",
    outputs: [
      {
        internalType: "contract i_addresses_provider",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GIG_REVISION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "time_required",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "metadata",
            type: "string",
          },
        ],
        internalType: "struct l_data_types.s_package[]",
        name: "packages",
        type: "tuple[]",
      },
    ],
    name: "create_gig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "gig_id",
        type: "uint256",
      },
    ],
    name: "get_gig_by_id",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "is_init",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "seller_id",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "metadata",
            type: "string",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "price",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "time_required",
                type: "uint256",
              },
              {
                internalType: "string",
                name: "metadata",
                type: "string",
              },
            ],
            internalType: "struct l_data_types.s_package[]",
            name: "packages",
            type: "tuple[]",
          },
        ],
        internalType: "struct l_data_types.s_gig",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get_gigs_count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get_gigs_list",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "is_init",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "seller_id",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "metadata",
            type: "string",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "price",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "time_required",
                type: "uint256",
              },
              {
                internalType: "string",
                name: "metadata",
                type: "string",
              },
            ],
            internalType: "struct l_data_types.s_package[]",
            name: "packages",
            type: "tuple[]",
          },
        ],
        internalType: "struct l_data_types.s_gig[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract i_addresses_provider",
        name: "provider",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040526000805534801561001457600080fd5b50604051610fa9380380610fa983398101604081905261003391610044565b6001600160a01b0316608052610074565b60006020828403121561005657600080fd5b81516001600160a01b038116811461006d57600080fd5b9392505050565b608051610f0d61009c600039600081816087015281816104c6015261054c0152610f0d6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806375afa5b41161005b57806375afa5b4146100f1578063c4d66de8146100f9578063c95cb5c61461010e578063e28155691461012157600080fd5b80630542975c1461008257806308984579146100c65780634b125f65146100db575b600080fd5b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ce610141565b6040516100bd9190610a63565b6100e3610410565b6040519081526020016100bd565b6100e3600181565b61010c610107366004610add565b610420565b005b61010c61011c366004610b71565b610548565b61013461012f366004610cd5565b61076b565b6040516100bd9190610cee565b6060600061014d610410565b90506000808267ffffffffffffffff81111561016b5761016b610b01565b6040519080825280602002602001820160405280156101c957816020015b6101b660405180608001604052806000151581526020016000815260200160608152602001606081525090565b8152602001906001900390816101895790505b50905060005b838110156104065760008181526035602052604090205460ff16156103e6576000818152603560209081526040918290208251608081018452815460ff1615158152600182015492810192909252600281018054929391929184019161023490610d01565b80601f016020809104026020016040519081016040528092919081815260200182805461026090610d01565b80156102ad5780601f10610282576101008083540402835291602001916102ad565b820191906000526020600020905b81548152906001019060200180831161029057829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156103b35783829060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201805461032290610d01565b80601f016020809104026020016040519081016040528092919081815260200182805461034e90610d01565b801561039b5780601f106103705761010080835404028352916020019161039b565b820191906000526020600020905b81548152906001019060200180831161037e57829003601f168201915b505050505081525050815260200190600101906102db565b5050509152508390506103c68584610d52565b815181106103d6576103d6610d69565b60200260200101819052506103f4565b826103f081610d7f565b9350505b806103fe81610d7f565b9150506101cf565b5091038152919050565b600061041b60345490565b905090565b6001805460ff16806104315750303b155b8061043d575060005481115b6104a55760405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201526d195b881a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b60015460ff161580156104c4576001805460ff19168117905560008290555b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614604051806040016040528060018152602001601960f91b815250906105315760405162461bcd60e51b815260040161049c9190610d9a565b508015610543576001805460ff191690555b505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fba1bc4c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cc9190610dad565b604051632d2eb75b60e01b81523360048201526001600160a01b039190911690632d2eb75b90602401602060405180830381865afa158015610612573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106369190610dca565b9050600061064360345490565b90506000610652826001610de3565b9050610662603480546001019055565b600073__$f5821602d7a72f5f8aeeb7fd817cbdbf02$__636e66124060356040518060800160405280868152602001888152602001604051806040016040528060048152602001631d195cdd60e21b8152508152602001898152506040518363ffffffff1660e01b81526004016106da929190610dfb565b602060405180830381865af41580156106f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071b9190610eb5565b905080801561072b575060345482145b604051806040016040528060018152602001600760fb1b815250906107635760405162461bcd60e51b815260040161049c9190610d9a565b505050505050565b61079860405180608001604052806000151581526020016000815260200160608152602001606081525090565b6000828152603560209081526040918290208251608081018452815460ff161515815260018201549281019290925260028101805492939192918401916107de90610d01565b80601f016020809104026020016040519081016040528092919081815260200182805461080a90610d01565b80156108575780601f1061082c57610100808354040283529160200191610857565b820191906000526020600020905b81548152906001019060200180831161083a57829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b8282101561095d578382906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820180546108cc90610d01565b80601f01602080910402602001604051908101604052809291908181526020018280546108f890610d01565b80156109455780601f1061091a57610100808354040283529160200191610945565b820191906000526020600020905b81548152906001019060200180831161092857829003601f168201915b50505050508152505081526020019060010190610885565b505050915250909392505050565b6000815180845260005b8181101561099157602081850181015186830182015201610975565b818111156109a3576000602083870101525b50601f01601f19169290920160200192915050565b8051151582526000602080830151818501526040808401516080828701526109e3608087018261096b565b9050606080860151878303828901528281518085528685019150868160051b860101878401935060005b82811015610a5457868203601f19018452845180518352898101518a840152880151888301879052610a418784018261096b565b958a0195948a0194925050600101610a0d565b509a9950505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ab857603f19888603018452610aa68583516109b8565b94509285019290850190600101610a8a565b5092979650505050505050565b6001600160a01b0381168114610ada57600080fd5b50565b600060208284031215610aef57600080fd5b8135610afa81610ac5565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610b3a57610b3a610b01565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610b6957610b69610b01565b604052919050565b60006020808385031215610b8457600080fd5b823567ffffffffffffffff80821115610b9c57600080fd5b818501915085601f830112610bb057600080fd5b813581811115610bc257610bc2610b01565b8060051b610bd1858201610b40565b9182528381018501918581019089841115610beb57600080fd5b86860192505b83831015610cc857823585811115610c095760008081fd5b86016060601f19828d038101821315610c225760008081fd5b610c2a610b17565b838b01358152604080850135828d0152928401359289841115610c4d5760008081fd5b83850194508e603f860112610c6457600093508384fd5b8b850135935089841115610c7a57610c7a610b01565b610c8a8c84601f87011601610b40565b92508383528e81858701011115610ca15760008081fd5b838186018d85013760009383018c0193909352918201528352509186019190860190610bf1565b9998505050505050505050565b600060208284031215610ce757600080fd5b5035919050565b602081526000610afa60208301846109b8565b600181811c90821680610d1557607f821691505b60208210811415610d3657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082821015610d6457610d64610d3c565b500390565b634e487b7160e01b600052603260045260246000fd5b6000600019821415610d9357610d93610d3c565b5060010190565b602081526000610afa602083018461096b565b600060208284031215610dbf57600080fd5b8151610afa81610ac5565b600060208284031215610ddc57600080fd5b5051919050565b60008219821115610df657610df6610d3c565b500190565b60006040848352602081818501528451828501528085015160608181870152838701519150608080870152610e3360c087018361096b565b87820151878203603f190160a0890152805180835291935084019084840190600581901b8501860160005b82811015610ea557868203601f190184528451805183528881015189840152890151898301879052610e928784018261096b565b9589019594890194925050600101610e5e565b509b9a5050505050505050505050565b600060208284031215610ec757600080fd5b81518015158114610afa57600080fdfea2646970667358221220615ae89b97ba9aedd702c3723b438e1a790600cb76db42d47171434ae04b5f5b64736f6c634300080a0033";

type C_gigConstructorParams =
  | [linkLibraryAddresses: C_gigLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: C_gigConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class C_gig__factory extends ContractFactory {
  constructor(...args: C_gigConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, C_gig__factory.linkBytecode(linkLibraryAddresses), signer);
    }
  }

  static linkBytecode(linkLibraryAddresses: C_gigLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$f5821602d7a72f5f8aeeb7fd817cbdbf02\\$__", "g"),
      linkLibraryAddresses[
        "contracts/protocol/libraries/logics/l_gig_logic.sol:l_gig_logic"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    provider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<C_gig> {
    return super.deploy(provider, overrides || {}) as Promise<C_gig>;
  }
  override getDeployTransaction(
    provider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(provider, overrides || {});
  }
  override attach(address: string): C_gig {
    return super.attach(address) as C_gig;
  }
  override connect(signer: Signer): C_gig__factory {
    return super.connect(signer) as C_gig__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): C_gigInterface {
    return new utils.Interface(_abi) as C_gigInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): C_gig {
    return new Contract(address, _abi, signerOrProvider) as C_gig;
  }
}

export interface C_gigLibraryAddresses {
  ["contracts/protocol/libraries/logics/l_gig_logic.sol:l_gig_logic"]: string;
}
