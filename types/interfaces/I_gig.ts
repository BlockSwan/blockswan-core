/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace L_data_types {
  export type S_packageStruct = {
    price: PromiseOrValue<BigNumberish>;
    time_required: PromiseOrValue<BigNumberish>;
    metadata: PromiseOrValue<string>;
  };

  export type S_packageStructOutput = [BigNumber, BigNumber, string] & {
    price: BigNumber;
    time_required: BigNumber;
    metadata: string;
  };

  export type S_gigStruct = {
    is_init: PromiseOrValue<boolean>;
    seller_id: PromiseOrValue<BigNumberish>;
    metadata: PromiseOrValue<string>;
    packages: L_data_types.S_packageStruct[];
  };

  export type S_gigStructOutput = [
    boolean,
    BigNumber,
    string,
    L_data_types.S_packageStructOutput[]
  ] & {
    is_init: boolean;
    seller_id: BigNumber;
    metadata: string;
    packages: L_data_types.S_packageStructOutput[];
  };
}

export interface I_gigInterface extends utils.Interface {
  functions: {
    "ADDRESSES_PROVIDER()": FunctionFragment;
    "create_gig((uint256,uint256,string)[])": FunctionFragment;
    "get_gig_by_id(uint256)": FunctionFragment;
    "get_gigs_count()": FunctionFragment;
    "get_gigs_list()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADDRESSES_PROVIDER"
      | "create_gig"
      | "get_gig_by_id"
      | "get_gigs_count"
      | "get_gigs_list"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADDRESSES_PROVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "create_gig",
    values: [L_data_types.S_packageStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "get_gig_by_id",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "get_gigs_count",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_gigs_list",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ADDRESSES_PROVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create_gig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_gig_by_id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_gigs_count",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_gigs_list",
    data: BytesLike
  ): Result;

  events: {};
}

export interface I_gig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: I_gigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<[string]>;

    create_gig(
      packages: L_data_types.S_packageStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    get_gig_by_id(
      gig_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[L_data_types.S_gigStructOutput]>;

    get_gigs_count(overrides?: CallOverrides): Promise<[BigNumber]>;

    get_gigs_list(
      overrides?: CallOverrides
    ): Promise<[L_data_types.S_gigStructOutput[]]>;
  };

  ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

  create_gig(
    packages: L_data_types.S_packageStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  get_gig_by_id(
    gig_id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<L_data_types.S_gigStructOutput>;

  get_gigs_count(overrides?: CallOverrides): Promise<BigNumber>;

  get_gigs_list(
    overrides?: CallOverrides
  ): Promise<L_data_types.S_gigStructOutput[]>;

  callStatic: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

    create_gig(
      packages: L_data_types.S_packageStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    get_gig_by_id(
      gig_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<L_data_types.S_gigStructOutput>;

    get_gigs_count(overrides?: CallOverrides): Promise<BigNumber>;

    get_gigs_list(
      overrides?: CallOverrides
    ): Promise<L_data_types.S_gigStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    create_gig(
      packages: L_data_types.S_packageStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    get_gig_by_id(
      gig_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_gigs_count(overrides?: CallOverrides): Promise<BigNumber>;

    get_gigs_list(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ADDRESSES_PROVIDER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create_gig(
      packages: L_data_types.S_packageStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    get_gig_by_id(
      gig_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_gigs_count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_gigs_list(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
