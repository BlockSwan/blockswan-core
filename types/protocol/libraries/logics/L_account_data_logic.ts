/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace Counters {
  export type CounterStruct = { _value: PromiseOrValue<BigNumberish> };

  export type CounterStructOutput = [BigNumber] & { _value: BigNumber };
}

export declare namespace L_data_types {
  export type S_accountStruct = {
    is_init: PromiseOrValue<boolean>;
    inviter_id: PromiseOrValue<BigNumberish>;
    xp: PromiseOrValue<BigNumberish>;
    pub_keys: PromiseOrValue<string>[];
    affiliates: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    metadata: PromiseOrValue<string>;
    invite_buyer: Counters.CounterStruct;
    invite_seller: Counters.CounterStruct;
  };

  export type S_accountStructOutput = [
    boolean,
    BigNumber,
    BigNumber,
    string[],
    [BigNumber, BigNumber],
    string,
    Counters.CounterStructOutput,
    Counters.CounterStructOutput
  ] & {
    is_init: boolean;
    inviter_id: BigNumber;
    xp: BigNumber;
    pub_keys: string[];
    affiliates: [BigNumber, BigNumber];
    metadata: string;
    invite_buyer: Counters.CounterStructOutput;
    invite_seller: Counters.CounterStructOutput;
  };
}

export interface L_account_data_logicInterface extends utils.Interface {
  functions: {};

  events: {
    "ev_account_data_updated(uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ev_account_data_updated"): EventFragment;
}

export interface ev_account_data_updatedEventObject {
  account_id: BigNumber;
  account: L_data_types.S_accountStructOutput;
}
export type ev_account_data_updatedEvent = TypedEvent<
  [BigNumber, L_data_types.S_accountStructOutput],
  ev_account_data_updatedEventObject
>;

export type ev_account_data_updatedEventFilter =
  TypedEventFilter<ev_account_data_updatedEvent>;

export interface L_account_data_logic extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L_account_data_logicInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "ev_account_data_updated(uint256,tuple)"(
      account_id?: PromiseOrValue<BigNumberish> | null,
      account?: null
    ): ev_account_data_updatedEventFilter;
    ev_account_data_updated(
      account_id?: PromiseOrValue<BigNumberish> | null,
      account?: null
    ): ev_account_data_updatedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
