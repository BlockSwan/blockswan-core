/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface C_acl_managerInterface extends utils.Interface {
  functions: {
    "ADDRESSES_PROVIDER()": FunctionFragment;
    "BLACKLIST_ROLE()": FunctionFragment;
    "BUYER_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "JUDGE_ROLE()": FunctionFragment;
    "PROTOCOL_ADMIN_ROLE()": FunctionFragment;
    "SELLER_ROLE()": FunctionFragment;
    "WHITELIST_ROLE()": FunctionFragment;
    "add_blacklist(address)": FunctionFragment;
    "add_buyer(address)": FunctionFragment;
    "add_judge(address)": FunctionFragment;
    "add_protocol_admin(address)": FunctionFragment;
    "add_seller(address)": FunctionFragment;
    "add_whitelist(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "get_blacklist_count()": FunctionFragment;
    "get_blacklist_member(uint256)": FunctionFragment;
    "get_buyer_count()": FunctionFragment;
    "get_buyer_member(uint256)": FunctionFragment;
    "get_judge_count()": FunctionFragment;
    "get_judge_member(uint256)": FunctionFragment;
    "get_protocol_admin_count()": FunctionFragment;
    "get_protocol_admin_member(uint256)": FunctionFragment;
    "get_seller_count()": FunctionFragment;
    "get_seller_member(uint256)": FunctionFragment;
    "get_whitelist_count()": FunctionFragment;
    "get_whitelist_member(uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "is_blacklist(address)": FunctionFragment;
    "is_buyer(address)": FunctionFragment;
    "is_judge(address)": FunctionFragment;
    "is_protocol_admin(address)": FunctionFragment;
    "is_seller(address)": FunctionFragment;
    "is_whitelist(address)": FunctionFragment;
    "remove_blacklist(address)": FunctionFragment;
    "remove_buyer(address)": FunctionFragment;
    "remove_judge(address)": FunctionFragment;
    "remove_protocol_admin(address)": FunctionFragment;
    "remove_seller(address)": FunctionFragment;
    "remove_whitelist(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "set_role_admin(bytes32,bytes32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADDRESSES_PROVIDER"
      | "BLACKLIST_ROLE"
      | "BUYER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "JUDGE_ROLE"
      | "PROTOCOL_ADMIN_ROLE"
      | "SELLER_ROLE"
      | "WHITELIST_ROLE"
      | "add_blacklist"
      | "add_buyer"
      | "add_judge"
      | "add_protocol_admin"
      | "add_seller"
      | "add_whitelist"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "get_blacklist_count"
      | "get_blacklist_member"
      | "get_buyer_count"
      | "get_buyer_member"
      | "get_judge_count"
      | "get_judge_member"
      | "get_protocol_admin_count"
      | "get_protocol_admin_member"
      | "get_seller_count"
      | "get_seller_member"
      | "get_whitelist_count"
      | "get_whitelist_member"
      | "grantRole"
      | "hasRole"
      | "is_blacklist"
      | "is_buyer"
      | "is_judge"
      | "is_protocol_admin"
      | "is_seller"
      | "is_whitelist"
      | "remove_blacklist"
      | "remove_buyer"
      | "remove_judge"
      | "remove_protocol_admin"
      | "remove_seller"
      | "remove_whitelist"
      | "renounceRole"
      | "revokeRole"
      | "set_role_admin"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADDRESSES_PROVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BLACKLIST_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BUYER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "JUDGE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROTOCOL_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SELLER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WHITELIST_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "add_blacklist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "add_buyer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "add_judge",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "add_protocol_admin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "add_seller",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "add_whitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "get_blacklist_count",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_blacklist_member",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "get_buyer_count",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_buyer_member",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "get_judge_count",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_judge_member",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "get_protocol_admin_count",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_protocol_admin_member",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "get_seller_count",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_seller_member",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "get_whitelist_count",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_whitelist_member",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "is_blacklist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "is_buyer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "is_judge",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "is_protocol_admin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "is_seller",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "is_whitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_blacklist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_buyer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_judge",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_protocol_admin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_seller",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_whitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "set_role_admin",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "ADDRESSES_PROVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BLACKLIST_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BUYER_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "JUDGE_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PROTOCOL_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SELLER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WHITELIST_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "add_blacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "add_buyer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add_judge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "add_protocol_admin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "add_seller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "add_whitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_blacklist_count",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_blacklist_member",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_buyer_count",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_buyer_member",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_judge_count",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_judge_member",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_protocol_admin_count",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_protocol_admin_member",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_seller_count",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_seller_member",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_whitelist_count",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_whitelist_member",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "is_blacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "is_buyer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "is_judge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "is_protocol_admin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "is_seller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "is_whitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_blacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_buyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_judge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_protocol_admin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_seller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_whitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set_role_admin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface C_acl_manager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: C_acl_managerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<[string]>;

    BLACKLIST_ROLE(overrides?: CallOverrides): Promise<[string]>;

    BUYER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    JUDGE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PROTOCOL_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SELLER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    WHITELIST_ROLE(overrides?: CallOverrides): Promise<[string]>;

    add_blacklist(
      blacklist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    add_buyer(
      buyer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    add_judge(
      judge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    add_protocol_admin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    add_seller(
      seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    add_whitelist(
      whitelist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    get_blacklist_count(overrides?: CallOverrides): Promise<[BigNumber]>;

    get_blacklist_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    get_buyer_count(overrides?: CallOverrides): Promise<[BigNumber]>;

    get_buyer_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    get_judge_count(overrides?: CallOverrides): Promise<[BigNumber]>;

    get_judge_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    get_protocol_admin_count(overrides?: CallOverrides): Promise<[BigNumber]>;

    get_protocol_admin_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    get_seller_count(overrides?: CallOverrides): Promise<[BigNumber]>;

    get_seller_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    get_whitelist_count(overrides?: CallOverrides): Promise<[BigNumber]>;

    get_whitelist_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    is_blacklist(
      blacklist: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    is_buyer(
      buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    is_judge(
      judge: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    is_protocol_admin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    is_seller(
      seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    is_whitelist(
      whitelist: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    remove_blacklist(
      blacklist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    remove_buyer(
      buyer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    remove_judge(
      judge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    remove_protocol_admin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    remove_seller(
      seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    remove_whitelist(
      whitelist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_role_admin(
      role: PromiseOrValue<BytesLike>,
      admin_role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

  BLACKLIST_ROLE(overrides?: CallOverrides): Promise<string>;

  BUYER_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  JUDGE_ROLE(overrides?: CallOverrides): Promise<string>;

  PROTOCOL_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  SELLER_ROLE(overrides?: CallOverrides): Promise<string>;

  WHITELIST_ROLE(overrides?: CallOverrides): Promise<string>;

  add_blacklist(
    blacklist: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  add_buyer(
    buyer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  add_judge(
    judge: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  add_protocol_admin(
    admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  add_seller(
    seller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  add_whitelist(
    whitelist: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get_blacklist_count(overrides?: CallOverrides): Promise<BigNumber>;

  get_blacklist_member(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  get_buyer_count(overrides?: CallOverrides): Promise<BigNumber>;

  get_buyer_member(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  get_judge_count(overrides?: CallOverrides): Promise<BigNumber>;

  get_judge_member(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  get_protocol_admin_count(overrides?: CallOverrides): Promise<BigNumber>;

  get_protocol_admin_member(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  get_seller_count(overrides?: CallOverrides): Promise<BigNumber>;

  get_seller_member(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  get_whitelist_count(overrides?: CallOverrides): Promise<BigNumber>;

  get_whitelist_member(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  is_blacklist(
    blacklist: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  is_buyer(
    buyer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  is_judge(
    judge: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  is_protocol_admin(
    admin: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  is_seller(
    seller: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  is_whitelist(
    whitelist: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  remove_blacklist(
    blacklist: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  remove_buyer(
    buyer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  remove_judge(
    judge: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  remove_protocol_admin(
    admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  remove_seller(
    seller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  remove_whitelist(
    whitelist: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_role_admin(
    role: PromiseOrValue<BytesLike>,
    admin_role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

    BLACKLIST_ROLE(overrides?: CallOverrides): Promise<string>;

    BUYER_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    JUDGE_ROLE(overrides?: CallOverrides): Promise<string>;

    PROTOCOL_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    SELLER_ROLE(overrides?: CallOverrides): Promise<string>;

    WHITELIST_ROLE(overrides?: CallOverrides): Promise<string>;

    add_blacklist(
      blacklist: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    add_buyer(
      buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    add_judge(
      judge: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    add_protocol_admin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    add_seller(
      seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    add_whitelist(
      whitelist: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_blacklist_count(overrides?: CallOverrides): Promise<BigNumber>;

    get_blacklist_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    get_buyer_count(overrides?: CallOverrides): Promise<BigNumber>;

    get_buyer_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    get_judge_count(overrides?: CallOverrides): Promise<BigNumber>;

    get_judge_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    get_protocol_admin_count(overrides?: CallOverrides): Promise<BigNumber>;

    get_protocol_admin_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    get_seller_count(overrides?: CallOverrides): Promise<BigNumber>;

    get_seller_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    get_whitelist_count(overrides?: CallOverrides): Promise<BigNumber>;

    get_whitelist_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    is_blacklist(
      blacklist: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    is_buyer(
      buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    is_judge(
      judge: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    is_protocol_admin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    is_seller(
      seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    is_whitelist(
      whitelist: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    remove_blacklist(
      blacklist: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    remove_buyer(
      buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    remove_judge(
      judge: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    remove_protocol_admin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    remove_seller(
      seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    remove_whitelist(
      whitelist: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    set_role_admin(
      role: PromiseOrValue<BytesLike>,
      admin_role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    BLACKLIST_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    BUYER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    JUDGE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SELLER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    WHITELIST_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    add_blacklist(
      blacklist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    add_buyer(
      buyer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    add_judge(
      judge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    add_protocol_admin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    add_seller(
      seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    add_whitelist(
      whitelist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_blacklist_count(overrides?: CallOverrides): Promise<BigNumber>;

    get_blacklist_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_buyer_count(overrides?: CallOverrides): Promise<BigNumber>;

    get_buyer_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_judge_count(overrides?: CallOverrides): Promise<BigNumber>;

    get_judge_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_protocol_admin_count(overrides?: CallOverrides): Promise<BigNumber>;

    get_protocol_admin_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_seller_count(overrides?: CallOverrides): Promise<BigNumber>;

    get_seller_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_whitelist_count(overrides?: CallOverrides): Promise<BigNumber>;

    get_whitelist_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    is_blacklist(
      blacklist: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    is_buyer(
      buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    is_judge(
      judge: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    is_protocol_admin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    is_seller(
      seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    is_whitelist(
      whitelist: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remove_blacklist(
      blacklist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    remove_buyer(
      buyer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    remove_judge(
      judge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    remove_protocol_admin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    remove_seller(
      seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    remove_whitelist(
      whitelist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_role_admin(
      role: PromiseOrValue<BytesLike>,
      admin_role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADDRESSES_PROVIDER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BLACKLIST_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BUYER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    JUDGE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROTOCOL_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SELLER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WHITELIST_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    add_blacklist(
      blacklist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    add_buyer(
      buyer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    add_judge(
      judge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    add_protocol_admin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    add_seller(
      seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    add_whitelist(
      whitelist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_blacklist_count(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_blacklist_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_buyer_count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_buyer_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_judge_count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_judge_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_protocol_admin_count(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_protocol_admin_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_seller_count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_seller_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_whitelist_count(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_whitelist_member(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    is_blacklist(
      blacklist: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    is_buyer(
      buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    is_judge(
      judge: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    is_protocol_admin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    is_seller(
      seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    is_whitelist(
      whitelist: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remove_blacklist(
      blacklist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    remove_buyer(
      buyer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    remove_judge(
      judge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    remove_protocol_admin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    remove_seller(
      seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    remove_whitelist(
      whitelist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_role_admin(
      role: PromiseOrValue<BytesLike>,
      admin_role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
